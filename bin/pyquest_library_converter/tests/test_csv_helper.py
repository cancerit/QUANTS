import unittest
from dataclasses import dataclass, field
import typing as t

from tests import test_data
from src.csv.csv_helper import CSVHelper


@dataclass
class IterableTestCase:
    name: str
    csv_path: str
    example_header: str
    expected_header_row: int
    expected_header_index: int
    expected_delimiter: str
    expected_start_row: int
    expected_column_count: int
    expected_concatenated_output_rows: t.List[str] = field(default_factory=list)


class TestCSVHelper(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        cls.test_cases = [
            IterableTestCase(
                name="example_data_1_csv",
                csv_path=test_data.get.example_data_1_csv(),
                example_header="oligo_name",
                expected_header_row=0,
                expected_header_index=1,
                expected_delimiter=",",
                expected_start_row=0,
                expected_column_count=24,
                expected_concatenated_output_rows=[
                    # First 10 rows
                    "oligo_name,species,assembly,gene_id,transcript_id,src_type,ref_chr,ref_strand,ref_start,ref_end,revc,ref_seq,pam_seq,vcf_alias,vcf_var_id,mut_position,ref,new,ref_aa,alt_aa,mut_type,mutator,oligo_length,mseq",
                    "ENST00000344626.10.ENSG00000127616.20_chr19:11027766_1del,hs,hg38,ENSG00000127616.20,ENST00000344626.10,ref,chr19,+,11027748,11027999,0,TCCTGCGCCTTCTCTCCTGCCTCCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGCCAAATGACCTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGC,TCCTGCGCCTTCTCTCCTGCCTCCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGTCAGATGACTTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGC,,,11027766,G,,,,,1del,292,AATGATACGGCGACCACCGATCCTGCGCCTTCTCTCCTCCTCCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGTCAGATGACTTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGCTCGTATGCCGTCTTCTGCTTG",
                    "ENST00000344626.10.ENSG00000127616.20_chr19:11027767_1del,hs,hg38,ENSG00000127616.20,ENST00000344626.10,ref,chr19,+,11027748,11027999,0,TCCTGCGCCTTCTCTCCTGCCTCCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGCCAAATGACCTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGC,TCCTGCGCCTTCTCTCCTGCCTCCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGTCAGATGACTTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGC,,,11027767,C,,,,,1del,292,AATGATACGGCGACCACCGATCCTGCGCCTTCTCTCCTGCTCCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGTCAGATGACTTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGCTCGTATGCCGTCTTCTGCTTG",
                    "ENST00000344626.10.ENSG00000127616.20_chr19:11027768_1del,hs,hg38,ENSG00000127616.20,ENST00000344626.10,ref,chr19,+,11027748,11027999,0,TCCTGCGCCTTCTCTCCTGCCTCCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGCCAAATGACCTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGC,TCCTGCGCCTTCTCTCCTGCCTCCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGTCAGATGACTTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGC,,,11027768,C,,,,,1del,292,AATGATACGGCGACCACCGATCCTGCGCCTTCTCTCCTGCTCCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGTCAGATGACTTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGCTCGTATGCCGTCTTCTGCTTG",
                    "ENST00000344626.10.ENSG00000127616.20_chr19:11027769_1del,hs,hg38,ENSG00000127616.20,ENST00000344626.10,ref,chr19,+,11027748,11027999,0,TCCTGCGCCTTCTCTCCTGCCTCCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGCCAAATGACCTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGC,TCCTGCGCCTTCTCTCCTGCCTCCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGTCAGATGACTTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGC,,,11027769,T,,,,,1del,292,AATGATACGGCGACCACCGATCCTGCGCCTTCTCTCCTGCCCCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGTCAGATGACTTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGCTCGTATGCCGTCTTCTGCTTG",
                    "ENST00000344626.10.ENSG00000127616.20_chr19:11027770_1del,hs,hg38,ENSG00000127616.20,ENST00000344626.10,ref,chr19,+,11027748,11027999,0,TCCTGCGCCTTCTCTCCTGCCTCCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGCCAAATGACCTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGC,TCCTGCGCCTTCTCTCCTGCCTCCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGTCAGATGACTTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGC,,,11027770,C,,,,,1del,292,AATGATACGGCGACCACCGATCCTGCGCCTTCTCTCCTGCCTCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGTCAGATGACTTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGCTCGTATGCCGTCTTCTGCTTG",
                    "ENST00000344626.10.ENSG00000127616.20_chr19:11027771_1del,hs,hg38,ENSG00000127616.20,ENST00000344626.10,ref,chr19,+,11027748,11027999,0,TCCTGCGCCTTCTCTCCTGCCTCCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGCCAAATGACCTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGC,TCCTGCGCCTTCTCTCCTGCCTCCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGTCAGATGACTTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGC,,,11027771,C,,,,,1del,292,AATGATACGGCGACCACCGATCCTGCGCCTTCTCTCCTGCCTCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGTCAGATGACTTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGCTCGTATGCCGTCTTCTGCTTG",
                    "ENST00000344626.10.ENSG00000127616.20_chr19:11027772_1del,hs,hg38,ENSG00000127616.20,ENST00000344626.10,ref,chr19,+,11027748,11027999,0,TCCTGCGCCTTCTCTCCTGCCTCCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGCCAAATGACCTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGC,TCCTGCGCCTTCTCTCCTGCCTCCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGTCAGATGACTTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGC,,,11027772,T,,,,,1del,292,AATGATACGGCGACCACCGATCCTGCGCCTTCTCTCCTGCCTCCCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGTCAGATGACTTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGCTCGTATGCCGTCTTCTGCTTG",
                    "ENST00000344626.10.ENSG00000127616.20_chr19:11027773_1del,hs,hg38,ENSG00000127616.20,ENST00000344626.10,ref,chr19,+,11027748,11027999,0,TCCTGCGCCTTCTCTCCTGCCTCCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGCCAAATGACCTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGC,TCCTGCGCCTTCTCTCCTGCCTCCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGTCAGATGACTTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGC,,,11027773,C,,,,,1del,292,AATGATACGGCGACCACCGATCCTGCGCCTTCTCTCCTGCCTCCTCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGTCAGATGACTTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGCTCGTATGCCGTCTTCTGCTTG",
                    "ENST00000344626.10.ENSG00000127616.20_chr19:11027774_1del,hs,hg38,ENSG00000127616.20,ENST00000344626.10,ref,chr19,+,11027748,11027999,0,TCCTGCGCCTTCTCTCCTGCCTCCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGCCAAATGACCTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGC,TCCTGCGCCTTCTCTCCTGCCTCCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGTCAGATGACTTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGC,,,11027774,C,,,,,1del,292,AATGATACGGCGACCACCGATCCTGCGCCTTCTCTCCTGCCTCCTCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGTCAGATGACTTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGCTCGTATGCCGTCTTCTGCTTG",
                ],
            ),
        ]

    def test_init(self):
        for skip_n_rows in range(4):
            for test_case in self.test_cases:
                with self.subTest(f"{test_case.name}, skip_n_rows={skip_n_rows}"):
                    self._assert_init_csv_helper(test_case, skip_n_rows)

    def _assert_init_csv_helper(self, test_case: IterableTestCase, skip_n_rows: int):
        # Given
        csv_helper = CSVHelper(test_case.csv_path, skip_n_rows)
        expected_start_row = test_case.expected_start_row + skip_n_rows

        # Then
        self.assertIsInstance(csv_helper, CSVHelper)
        self.assertEqual(csv_helper._delimiter, test_case.expected_delimiter)
        self.assertEqual(csv_helper._start_row, expected_start_row)
        self.assertEqual(csv_helper.columns_count, test_case.expected_column_count)

    def test__get_csv_reader__first_line(self):
        for skip_n_rows in range(4):
            for test_case in self.test_cases:
                with self.subTest(f"{test_case.name}, skip_n_rows={skip_n_rows}"):
                    self._assert__get_csv_reader__first_line(test_case, skip_n_rows)

    def _assert__get_csv_reader__first_line(
        self, test_case: IterableTestCase, skip_n_rows: int
    ):
        # Given
        csv_helper = CSVHelper(test_case.csv_path, skip_n_rows)
        expected_first_row = test_case.expected_concatenated_output_rows[skip_n_rows]

        delimiter = test_case.expected_delimiter

        # When
        with csv_helper.get_csv_reader() as reader:
            first_row = next(reader)
        actual_concat_first_row = delimiter.join(first_row)

        # Then
        self.assertEqual(actual_concat_first_row, expected_first_row)
        self.assertEqual(reader.line_num, 1, "reader should have read the first line")

    def test__get_csv_reader__first_four_lines(self):
        for test_case in self.test_cases:
            with self.subTest(f"{test_case.name}"):
                self._assert__get_csv_reader__four_lines(test_case, skip_n_rows=0)

    def test__get_csv_reader__any_four_lines(self):
        for skip_n_rows in range(4):
            for test_case in self.test_cases:
                with self.subTest(f"{test_case.name}, skip_n_rows={skip_n_rows}"):
                    self._assert__get_csv_reader__four_lines(
                        test_case, skip_n_rows=skip_n_rows
                    )

    def _assert__get_csv_reader__four_lines(
        self, test_case: IterableTestCase, skip_n_rows: int
    ):
        # Given
        start = skip_n_rows
        row_gap_size = 4
        stop = start + row_gap_size

        csv_helper = CSVHelper(test_case.csv_path, skip_n_rows)
        expected_concat_rows = "\n".join(
            test_case.expected_concatenated_output_rows[start:stop]
        )
        delimiter = test_case.expected_delimiter

        # When
        actual_rows = []
        with csv_helper.get_csv_reader() as reader:
            # We don't need to read all the rows just the gap size
            # but becasue the reader is pre-advanced by the constructor+skip_n_rows
            # we don't know what the start/stop lines are just the count of the rows
            for _ in range(row_gap_size):
                actual_rows.append(next(reader))
        actual_concat_rows = "\n".join([delimiter.join(row) for row in actual_rows])

        # Then
        self.assertEqual(actual_concat_rows, expected_concat_rows)
        self.assertEqual(
            reader.line_num, 4, "reader should have read the first four lines"
        )

    def test_find_header_row(self):
        for test_case in self.test_cases:
            with self.subTest(f"{test_case.name}"):
                self._assert_find_header_row(test_case)

    def _assert_find_header_row(self, test_case: IterableTestCase):
        # Given
        csv_helper = CSVHelper(test_case.csv_path, skip_n_rows=0)
        invalid_csv_helper = CSVHelper(test_case.csv_path, skip_n_rows=5)

        # When
        header_row = csv_helper.find_header_row(test_case.example_header)
        with self.assertRaises(ValueError):
            invalid_csv_helper.find_header_row(test_case.example_header)

        # Then
        self.assertEqual(header_row, test_case.expected_header_row)

    def test_find_header_index(self):
        for test_case in self.test_cases:
            with self.subTest(f"{test_case.name}"):
                self._assert_find_header_index(test_case)

    def _assert_find_header_index(self, test_case: IterableTestCase):
        # Given
        csv_helper = CSVHelper(test_case.csv_path, skip_n_rows=0)
        invalid_csv_helper = CSVHelper(test_case.csv_path, skip_n_rows=5)

        # When
        header_index = csv_helper.find_header_index(test_case.example_header)
        with self.assertRaises(ValueError):
            invalid_csv_helper.find_header_index(test_case.example_header)

        # Then
        self.assertEqual(header_index, test_case.expected_header_index)


if __name__ == "__main__":
    unittest.main()
