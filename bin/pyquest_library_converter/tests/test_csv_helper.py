import unittest
from dataclasses import dataclass, field
import typing as t
from pathlib import Path

import pytest

from tests import test_data
from src.csv.csv_helper import (
    CSVHelper,
    find_file_headers,
    find_column_headers_by_name,
    find_column_headers_by_heuristic,
)
from src.csv.csv_reader import CSVReaderFactory


@dataclass
class IterableTestCase:
    csv_path: str
    file_header_count: int
    has_column_header_row: bool
    example_header: str
    expected_header_row: int
    expected_header_index: int
    expected_delimiter: str
    expected_column_count: int
    expected_concatenated_data_rows: t.List[str] = field(default_factory=list)


TEST_CASE_PARAMS = [
    pytest.param(
        IterableTestCase(
            csv_path=test_data.get.example_data_1_csv(),
            file_header_count=0,
            has_column_header_row=True,
            example_header="oligo_name",
            expected_header_row=0,
            expected_header_index=1,
            expected_delimiter=",",
            expected_column_count=24,
            expected_concatenated_data_rows=[
                # First 10 rows
                "ENST00000344626.10.ENSG00000127616.20_chr19:11027766_1del,hs,hg38,ENSG00000127616.20,ENST00000344626.10,ref,chr19,+,11027748,11027999,0,TCCTGCGCCTTCTCTCCTGCCTCCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGCCAAATGACCTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGC,TCCTGCGCCTTCTCTCCTGCCTCCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGTCAGATGACTTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGC,,,11027766,G,,,,,1del,292,AATGATACGGCGACCACCGATCCTGCGCCTTCTCTCCTCCTCCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGTCAGATGACTTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGCTCGTATGCCGTCTTCTGCTTG",
                "ENST00000344626.10.ENSG00000127616.20_chr19:11027767_1del,hs,hg38,ENSG00000127616.20,ENST00000344626.10,ref,chr19,+,11027748,11027999,0,TCCTGCGCCTTCTCTCCTGCCTCCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGCCAAATGACCTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGC,TCCTGCGCCTTCTCTCCTGCCTCCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGTCAGATGACTTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGC,,,11027767,C,,,,,1del,292,AATGATACGGCGACCACCGATCCTGCGCCTTCTCTCCTGCTCCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGTCAGATGACTTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGCTCGTATGCCGTCTTCTGCTTG",
                "ENST00000344626.10.ENSG00000127616.20_chr19:11027768_1del,hs,hg38,ENSG00000127616.20,ENST00000344626.10,ref,chr19,+,11027748,11027999,0,TCCTGCGCCTTCTCTCCTGCCTCCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGCCAAATGACCTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGC,TCCTGCGCCTTCTCTCCTGCCTCCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGTCAGATGACTTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGC,,,11027768,C,,,,,1del,292,AATGATACGGCGACCACCGATCCTGCGCCTTCTCTCCTGCTCCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGTCAGATGACTTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGCTCGTATGCCGTCTTCTGCTTG",
                "ENST00000344626.10.ENSG00000127616.20_chr19:11027769_1del,hs,hg38,ENSG00000127616.20,ENST00000344626.10,ref,chr19,+,11027748,11027999,0,TCCTGCGCCTTCTCTCCTGCCTCCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGCCAAATGACCTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGC,TCCTGCGCCTTCTCTCCTGCCTCCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGTCAGATGACTTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGC,,,11027769,T,,,,,1del,292,AATGATACGGCGACCACCGATCCTGCGCCTTCTCTCCTGCCCCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGTCAGATGACTTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGCTCGTATGCCGTCTTCTGCTTG",
                "ENST00000344626.10.ENSG00000127616.20_chr19:11027770_1del,hs,hg38,ENSG00000127616.20,ENST00000344626.10,ref,chr19,+,11027748,11027999,0,TCCTGCGCCTTCTCTCCTGCCTCCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGCCAAATGACCTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGC,TCCTGCGCCTTCTCTCCTGCCTCCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGTCAGATGACTTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGC,,,11027770,C,,,,,1del,292,AATGATACGGCGACCACCGATCCTGCGCCTTCTCTCCTGCCTCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGTCAGATGACTTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGCTCGTATGCCGTCTTCTGCTTG",
                "ENST00000344626.10.ENSG00000127616.20_chr19:11027771_1del,hs,hg38,ENSG00000127616.20,ENST00000344626.10,ref,chr19,+,11027748,11027999,0,TCCTGCGCCTTCTCTCCTGCCTCCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGCCAAATGACCTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGC,TCCTGCGCCTTCTCTCCTGCCTCCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGTCAGATGACTTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGC,,,11027771,C,,,,,1del,292,AATGATACGGCGACCACCGATCCTGCGCCTTCTCTCCTGCCTCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGTCAGATGACTTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGCTCGTATGCCGTCTTCTGCTTG",
                "ENST00000344626.10.ENSG00000127616.20_chr19:11027772_1del,hs,hg38,ENSG00000127616.20,ENST00000344626.10,ref,chr19,+,11027748,11027999,0,TCCTGCGCCTTCTCTCCTGCCTCCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGCCAAATGACCTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGC,TCCTGCGCCTTCTCTCCTGCCTCCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGTCAGATGACTTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGC,,,11027772,T,,,,,1del,292,AATGATACGGCGACCACCGATCCTGCGCCTTCTCTCCTGCCTCCCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGTCAGATGACTTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGCTCGTATGCCGTCTTCTGCTTG",
                "ENST00000344626.10.ENSG00000127616.20_chr19:11027773_1del,hs,hg38,ENSG00000127616.20,ENST00000344626.10,ref,chr19,+,11027748,11027999,0,TCCTGCGCCTTCTCTCCTGCCTCCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGCCAAATGACCTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGC,TCCTGCGCCTTCTCTCCTGCCTCCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGTCAGATGACTTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGC,,,11027773,C,,,,,1del,292,AATGATACGGCGACCACCGATCCTGCGCCTTCTCTCCTGCCTCCTCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGTCAGATGACTTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGCTCGTATGCCGTCTTCTGCTTG",
                "ENST00000344626.10.ENSG00000127616.20_chr19:11027774_1del,hs,hg38,ENSG00000127616.20,ENST00000344626.10,ref,chr19,+,11027748,11027999,0,TCCTGCGCCTTCTCTCCTGCCTCCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGCCAAATGACCTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGC,TCCTGCGCCTTCTCTCCTGCCTCCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGTCAGATGACTTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGC,,,11027774,C,,,,,1del,292,AATGATACGGCGACCACCGATCCTGCGCCTTCTCTCCTGCCTCCTCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGTCAGATGACTTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGCTCGTATGCCGTCTTCTGCTTG",
            ],
        ),
        id="example_data_1_csv",
    ),
    pytest.param(
        IterableTestCase(
            csv_path=test_data.get.example_data_3_csv_w_file_and_column_headers(),
            file_header_count=2,
            has_column_header_row=True,
            example_header="#oligo_name",
            expected_header_row=2,
            expected_header_index=1,
            expected_delimiter=",",
            expected_column_count=24,
            expected_concatenated_data_rows=[
                # First 10 rows
                "ENST00000344626.10.ENSG00000127616.20_chr19:11027766_1del,hs,hg38,ENSG00000127616.20,ENST00000344626.10,ref,chr19,+,11027748,11027999,0,TCCTGCGCCTTCTCTCCTGCCTCCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGCCAAATGACCTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGC,TCCTGCGCCTTCTCTCCTGCCTCCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGTCAGATGACTTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGC,,,11027766,G,,,,,1del,292,AATGATACGGCGACCACCGATCCTGCGCCTTCTCTCCTCCTCCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGTCAGATGACTTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGCTCGTATGCCGTCTTCTGCTTG",
                "ENST00000344626.10.ENSG00000127616.20_chr19:11027767_1del,hs,hg38,ENSG00000127616.20,ENST00000344626.10,ref,chr19,+,11027748,11027999,0,TCCTGCGCCTTCTCTCCTGCCTCCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGCCAAATGACCTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGC,TCCTGCGCCTTCTCTCCTGCCTCCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGTCAGATGACTTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGC,,,11027767,C,,,,,1del,292,AATGATACGGCGACCACCGATCCTGCGCCTTCTCTCCTGCTCCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGTCAGATGACTTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGCTCGTATGCCGTCTTCTGCTTG",
                "ENST00000344626.10.ENSG00000127616.20_chr19:11027768_1del,hs,hg38,ENSG00000127616.20,ENST00000344626.10,ref,chr19,+,11027748,11027999,0,TCCTGCGCCTTCTCTCCTGCCTCCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGCCAAATGACCTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGC,TCCTGCGCCTTCTCTCCTGCCTCCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGTCAGATGACTTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGC,,,11027768,C,,,,,1del,292,AATGATACGGCGACCACCGATCCTGCGCCTTCTCTCCTGCTCCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGTCAGATGACTTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGCTCGTATGCCGTCTTCTGCTTG",
                "ENST00000344626.10.ENSG00000127616.20_chr19:11027769_1del,hs,hg38,ENSG00000127616.20,ENST00000344626.10,ref,chr19,+,11027748,11027999,0,TCCTGCGCCTTCTCTCCTGCCTCCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGCCAAATGACCTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGC,TCCTGCGCCTTCTCTCCTGCCTCCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGTCAGATGACTTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGC,,,11027769,T,,,,,1del,292,AATGATACGGCGACCACCGATCCTGCGCCTTCTCTCCTGCCCCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGTCAGATGACTTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGCTCGTATGCCGTCTTCTGCTTG",
                "ENST00000344626.10.ENSG00000127616.20_chr19:11027770_1del,hs,hg38,ENSG00000127616.20,ENST00000344626.10,ref,chr19,+,11027748,11027999,0,TCCTGCGCCTTCTCTCCTGCCTCCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGCCAAATGACCTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGC,TCCTGCGCCTTCTCTCCTGCCTCCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGTCAGATGACTTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGC,,,11027770,C,,,,,1del,292,AATGATACGGCGACCACCGATCCTGCGCCTTCTCTCCTGCCTCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGTCAGATGACTTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGCTCGTATGCCGTCTTCTGCTTG",
                "ENST00000344626.10.ENSG00000127616.20_chr19:11027771_1del,hs,hg38,ENSG00000127616.20,ENST00000344626.10,ref,chr19,+,11027748,11027999,0,TCCTGCGCCTTCTCTCCTGCCTCCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGCCAAATGACCTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGC,TCCTGCGCCTTCTCTCCTGCCTCCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGTCAGATGACTTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGC,,,11027771,C,,,,,1del,292,AATGATACGGCGACCACCGATCCTGCGCCTTCTCTCCTGCCTCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGTCAGATGACTTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGCTCGTATGCCGTCTTCTGCTTG",
                "ENST00000344626.10.ENSG00000127616.20_chr19:11027772_1del,hs,hg38,ENSG00000127616.20,ENST00000344626.10,ref,chr19,+,11027748,11027999,0,TCCTGCGCCTTCTCTCCTGCCTCCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGCCAAATGACCTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGC,TCCTGCGCCTTCTCTCCTGCCTCCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGTCAGATGACTTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGC,,,11027772,T,,,,,1del,292,AATGATACGGCGACCACCGATCCTGCGCCTTCTCTCCTGCCTCCCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGTCAGATGACTTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGCTCGTATGCCGTCTTCTGCTTG",
                "ENST00000344626.10.ENSG00000127616.20_chr19:11027773_1del,hs,hg38,ENSG00000127616.20,ENST00000344626.10,ref,chr19,+,11027748,11027999,0,TCCTGCGCCTTCTCTCCTGCCTCCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGCCAAATGACCTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGC,TCCTGCGCCTTCTCTCCTGCCTCCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGTCAGATGACTTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGC,,,11027773,C,,,,,1del,292,AATGATACGGCGACCACCGATCCTGCGCCTTCTCTCCTGCCTCCTCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGTCAGATGACTTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGCTCGTATGCCGTCTTCTGCTTG",
                "ENST00000344626.10.ENSG00000127616.20_chr19:11027774_1del,hs,hg38,ENSG00000127616.20,ENST00000344626.10,ref,chr19,+,11027748,11027999,0,TCCTGCGCCTTCTCTCCTGCCTCCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGCCAAATGACCTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGC,TCCTGCGCCTTCTCTCCTGCCTCCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGTCAGATGACTTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGC,,,11027774,C,,,,,1del,292,AATGATACGGCGACCACCGATCCTGCGCCTTCTCTCCTGCCTCCTCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGTCAGATGACTTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGCTCGTATGCCGTCTTCTGCTTG",
                "ENST00000344626.10.ENSG00000127616.20_chr19:11027775_1del,hs,hg38,ENSG00000127616.20,ENST00000344626.10,ref,chr19,+,11027748,11027999,0,TCCTGCGCCTTCTCTCCTGCCTCCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGCCAAATGACCTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGC,TCCTGCGCCTTCTCTCCTGCCTCCTCCACACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGTCAGATGACTTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGC,,,11027775,A,,,,,1del,292,AATGATACGGCGACCACCGATCCTGCGCCTTCTCTCCTGCCTCCTCCCACTCCAGGCTGGACCTGTACCGAGCCTCGGGTAAATTTGAGCTTCTTGATAGAATTCTTCCCAAACTCCGAGCAACCAACCACAAAGTGCTGCTGTTCTGTCAGATGACTTCCCTCATGACCATCATGGAAGATTACTTTGCGTATCGCGGCTTTAAATACCTCAGGCTTGATGGTGAGTATGAGCCAGTGAGGCGTTTCTTACAGGGTTTTGTTGTTGTGGCTCGTATGCCGTCTTCTGCTTG",
            ],
        ),
        id="example_data_3_csv_w_file_and_column_headers",
    ),
]

COLUMN_HEADER_PARAMS = [
    (test_data.get.example_data_1_csv(), ["oligo_name", "mseq"], 0),
    (test_data.get.example_data_2_tsv(), ["#id", "sgrna_seqs"], 2),
    (
        test_data.get.example_data_3_csv_w_file_and_column_headers(),
        ["#oligo_name", "mseq"],
        2,
    ),
    (test_data.get.example_data_3_csv_w_column_headers(), ["#oligo_name", "mseq"], 0),
    (test_data.get.example_data_3_csv_wo_headers(), ["#oligo_name", "mseq"], -1),
]

FILE_HEADER_PARAMS = [
    (test_data.get.example_data_1_csv(), []),
    (test_data.get.example_data_2_tsv(), [0, 1]),
    (test_data.get.example_data_3_csv_w_file_and_column_headers(), [0, 1]),
    (test_data.get.example_data_3_csv_w_column_headers(), []),
    (test_data.get.example_data_3_csv_wo_headers(), []),
]

# TESTS


@pytest.mark.parametrize(
    "skip_n_rows", [pytest.param(i, id=f"skip_n_rows={i}") for i in range(4)]
)
@pytest.mark.parametrize("test_case", TEST_CASE_PARAMS)
def test_CSVHelper__init(test_case: IterableTestCase, skip_n_rows: int):
    # Given
    csv_helper = CSVHelper(test_case.csv_path)

    # Then
    assert isinstance(csv_helper, CSVHelper)
    assert csv_helper._delimiter == test_case.expected_delimiter
    assert csv_helper.columns_count == test_case.expected_column_count


@pytest.mark.parametrize(
    "skip_n_rows", [pytest.param(i, id=f"skip_n_rows={i}") for i in range(4)]
)
@pytest.mark.parametrize("test_case", TEST_CASE_PARAMS)
def test__CSVReaderFactory__get_csv_reader__first_line(
    test_case: IterableTestCase, skip_n_rows: int
):
    # Given
    expected_first_row = test_case.expected_concatenated_data_rows[skip_n_rows]
    lines_to_read = 1
    adjusted_skip_n_rows = (
        skip_n_rows + test_case.file_header_count + test_case.has_column_header_row
    )
    delimiter = test_case.expected_delimiter

    # When
    csv_reader = CSVReaderFactory(test_case.csv_path, adjusted_skip_n_rows)
    with csv_reader.get_csv_reader() as reader:
        first_row = next(reader)
    actual_concat_first_row = delimiter.join(first_row)

    # Then
    assert actual_concat_first_row == expected_first_row
    assert reader.line_num == adjusted_skip_n_rows + lines_to_read


@pytest.mark.parametrize("test_case", TEST_CASE_PARAMS)
def test__CSVReaderFactory__get_csv_reader__first_four_lines(
    test_case: IterableTestCase,
):
    # Given
    skip_n_rows = 0
    lines_to_read = 4
    start = skip_n_rows
    stop = start + lines_to_read
    expected_concat_rows = "\n".join(
        test_case.expected_concatenated_data_rows[start:stop]
    )

    adjusted_skip_n_rows = (
        skip_n_rows + test_case.file_header_count + test_case.has_column_header_row
    )
    delimiter = test_case.expected_delimiter

    # When
    actual_rows = []
    csv_reader = CSVReaderFactory(test_case.csv_path, adjusted_skip_n_rows)
    with csv_reader.get_csv_reader() as reader:
        # We don't need to read all the rows just the gap size
        # but becasue the reader is pre-advanced by the constructor+adjusted_skip_n_rows
        # we don't know what the start/stop lines are just the count of the rows
        for _ in range(lines_to_read):
            actual_rows.append(next(reader))
    actual_concat_rows = "\n".join([delimiter.join(row) for row in actual_rows])

    # Then
    assert actual_concat_rows == expected_concat_rows
    assert reader.line_num == adjusted_skip_n_rows + lines_to_read


@pytest.mark.parametrize(
    "skip_n_rows", [pytest.param(i, id=f"skip_n_rows={i}") for i in range(4)]
)
@pytest.mark.parametrize("test_case", TEST_CASE_PARAMS)
def test__CSVReaderFactory__get_csv_reader__any_four_lines(
    test_case: IterableTestCase, skip_n_rows: int
):
    # Given
    lines_to_read = 4
    start = skip_n_rows
    stop = start + lines_to_read
    expected_concat_rows = "\n".join(
        test_case.expected_concatenated_data_rows[start:stop]
    )

    adjusted_skip_n_rows = (
        skip_n_rows + test_case.file_header_count + test_case.has_column_header_row
    )
    delimiter = test_case.expected_delimiter

    # When
    actual_rows = []
    csv_reader = CSVReaderFactory(test_case.csv_path, adjusted_skip_n_rows)
    with csv_reader.get_csv_reader() as reader:
        # We don't need to read all the rows just the gap size
        # but becasue the reader is pre-advanced by the constructor+skip_n_rows
        # we don't know what the start/stop lines are just the count of the rows
        for _ in range(lines_to_read):
            actual_rows.append(next(reader))
    actual_concat_rows = "\n".join([delimiter.join(row) for row in actual_rows])

    # Then
    assert actual_concat_rows == expected_concat_rows
    assert reader.line_num == adjusted_skip_n_rows + lines_to_read


@pytest.mark.parametrize("test_case", TEST_CASE_PARAMS)
def test_CSVHelper__find_header_row_index_by_header(test_case: IterableTestCase):
    # Given
    csv_helper = CSVHelper(test_case.csv_path)

    # When
    header_row = csv_helper.find_header_row_index_by_header(
        test_case.example_header, one_index=False
    )

    # Then
    assert header_row == test_case.expected_header_row


@pytest.mark.parametrize("test_case", TEST_CASE_PARAMS)
def test_CSVHelper__find_header_row_index(test_case: IterableTestCase):
    # Given
    csv_helper = CSVHelper(test_case.csv_path)

    # When
    header_row = csv_helper.find_header_row_index(one_index=False)

    # Then
    assert header_row == test_case.expected_header_row


@pytest.mark.parametrize("test_case", TEST_CASE_PARAMS)
def test_CSVHelper__find_column_index_by_header(test_case: IterableTestCase):
    # Given
    csv_helper = CSVHelper(test_case.csv_path)

    # When
    header_index = csv_helper.find_column_index_by_header(
        test_case.example_header, one_index=True
    )

    # Then
    assert header_index == test_case.expected_header_index


# @pytest.mark.parametrize(
#     "input_file, expected_count",
#     [
#         pytest.param(
#             test_data.get.example_data_3_csv_wo_headers(),
#             2481,
#             id="w/o_headers",
#         ),
#         pytest.param(
#             test_data.get.example_data_3_csv_w_file_and_column_headers(),
#             2484,
#             id="w/_file_and_column_headers",
#         ),
#         pytest.param(
#             test_data.get.example_data_3_csv_w_column_headers(),
#             2482,
#             id="w/_column_headers",
#         ),
#     ],
# )
# def test_CSVHelper__line_count(input_file, expected_count):
#     # Given
#     csv_helper = CSVHelper(file_path=input_file, skip_n_rows=0)

#     # When
#     actual_count = csv_helper.line_count

#     # Then
#     assert actual_count == expected_count


@pytest.mark.parametrize("csv_file, expected_file_header_indices", FILE_HEADER_PARAMS)
def test_find_file_headers(csv_file: Path, expected_file_header_indices):
    # When
    actual_header_indices = find_file_headers(csv_file)

    # Then
    assert actual_header_indices == expected_file_header_indices


@pytest.mark.parametrize("csv_file, header_names, expected_index", COLUMN_HEADER_PARAMS)
def test_find_column_headers_by_name(
    csv_file: Path,
    header_names,
    expected_index,
):
    # When
    actual_index = find_column_headers_by_name(csv_file, header_names)

    # Then
    assert actual_index == expected_index


@pytest.mark.parametrize("csv_file, _, expected_index", COLUMN_HEADER_PARAMS)
def test_find_column_headers_by_heuristic(csv_file: Path, _, expected_index):
    # When
    actual_index = find_column_headers_by_heuristic(csv_file)

    # Then
    assert actual_index == expected_index
