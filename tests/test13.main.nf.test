nextflow_pipeline {

    name "Test main.nf exits when given conflicting downsampling parameters"
    script "main.nf"

    test("Should fail on downsampling conflict") {

        when {
            params {
                input = "${projectDir}/tests/manifests/raw-cram-se.csv"
                single_end = false
                input_type = "cram"
                raw_sequencing_qc = true
                adapter_trimming = "cutadapt"
                adapter_cutadapt_options = "-a AGATCGGAAGAGCACACGTCTGAACTCCAGTCA -m 1"
                adapter_trimming_qc = true
                primer_trimming = "cutadapt"
                primer_cutadapt_options = "-g 'CCCTGGGAAGGTAATTTTAGATTTC...AGAGATTGGACAGCATAACGTGAAT' -m 1"
                primer_trimming_qc = true
                read_modification = true
                append_start = "ATTCACGTTATGCTGTCCAATCTCT"
                append_end = "GAAATCTAAAATTACCTTCCCAGGG"
                append_quality = "?"
                read_transform = "reverse_complement"
                transform_library = true
                pyquest_library_converter_options = "-N 1 -S 24"
                quantification = "pyquest"
                oligo_library = "${projectDir}/tests/ref/2.csv"
                downsampling = true
                downsampling_size = 1000000
                downsampling_seed = 413
            }
        }

        then {
            assert workflow.failed
        }

    }
}
